
#-- start of constituents_header ------

include ${CMTROOT}/src/Makefile.core

ifdef tag
CMTEXTRATAGS = $(tag)
else
tag       = $(CMTCONFIG)
endif

tags      = $(tag),$(CMTEXTRATAGS)

Convert_tag = $(tag)

#cmt_local_tagfile = $(Convert_tag).make
cmt_local_tagfile = $(bin)$(Convert_tag).make

#-include $(cmt_local_tagfile)
include $(cmt_local_tagfile)

#cmt_local_setup = $(bin)setup$$$$.make
#cmt_local_setup = $(bin)$(package)setup$$$$.make
#cmt_final_setup = $(bin)Convertsetup.make
cmt_final_setup = $(bin)setup.make
#cmt_final_setup = $(bin)$(package)setup.make

#--------------------------------------------------------

#cmt_lock_setup = /tmp/lock$(cmt_lock_pid).make
#cmt_temp_tag = /tmp/tag$(cmt_lock_pid).make

#first :: $(cmt_local_tagfile)
#	@echo $(cmt_local_tagfile) ok
#ifndef QUICK
#first :: $(cmt_final_setup) ;
#else
#first :: ;
#endif

##	@bin=`$(cmtexe) show macro_value bin`

#$(cmt_local_tagfile) : $(cmt_lock_setup)
#	@echo "#CMT> Error: $@: No such file" >&2; exit 1
#$(cmt_local_tagfile) :
#	@echo "#CMT> Warning: $@: No such file" >&2; exit
#	@echo "#CMT> Info: $@: No need to rebuild file" >&2; exit

#$(cmt_final_setup) : $(cmt_local_tagfile) 
#	$(echo) "(constituents.make) Rebuilding $@"
#	@if test ! -d $(@D); then $(mkdir) -p $(@D); fi; \
#	  if test -f $(cmt_local_setup); then /bin/rm -f $(cmt_local_setup); fi; \
#	  trap '/bin/rm -f $(cmt_local_setup)' 0 1 2 15; \
#	  $(cmtexe) -tag=$(tags) show setup >>$(cmt_local_setup); \
#	  if test ! -f $@; then \
#	    mv $(cmt_local_setup) $@; \
#	  else \
#	    if /usr/bin/diff $(cmt_local_setup) $@ >/dev/null ; then \
#	      : ; \
#	    else \
#	      mv $(cmt_local_setup) $@; \
#	    fi; \
#	  fi

#	@/bin/echo $@ ok   

#config :: checkuses
#	@exit 0
#checkuses : ;

env.make ::
	printenv >env.make.tmp; $(cmtexe) check files env.make.tmp env.make

ifndef QUICK
all :: build_library_links
	$(echo) "(constituents.make) all done"
endif

javadirs ::
	@if test ! -d $(javabin) ; then $(mkdir) -p $(javabin) ; fi

srcdirs ::
	@if test ! -d $(src) ; then $(mkdir) -p $(src) ; fi

dirs :: requirements
	@if test ! -d $(bin) ; then $(mkdir) -p $(bin) ; fi
#	@if test ! -r requirements ; then echo "No requirements file" ; fi; \
#	  if test ! -d $(bin) ; then $(mkdir) -p $(bin) ; fi

requirements :
	@if test ! -r requirements ; then echo "No requirements file" ; fi

build_library_links : dirs
	$(echo) "(constituents.make) Rebuilding library links"; \
	 $(build_library_links)
#	if test ! -d $(bin) ; then $(mkdir) -p $(bin) ; fi; \
#	$(build_library_links)

makefiles : ;

.DEFAULT ::
	$(echo) "(constituents.make) $@: No rule for such target" >&2
#	@echo "#CMT> Warning: $@: Using default commands" >&2; exit

#	@if test "$@" = "$(cmt_lock_setup)"; then \
	#  /bin/rm -f $(cmt_lock_setup); \
	 # touch $(cmt_lock_setup); \
	#fi

#-- end of constituents_header ------
#-- start of group ------

all_groups :: all

all :: $(all_dependencies)  $(all_pre_constituents) $(all_constituents)  $(all_post_constituents)
	$(echo) "all ok."

#	@/bin/echo " all ok."

clean :: allclean

allclean ::  $(all_constituentsclean)
	$(echo) $(all_constituentsclean)
	$(echo) "allclean ok."

#	@echo $(all_constituentsclean)
#	@/bin/echo " allclean ok."

allclean :: makefilesclean

#-- end of group ------
#-- start of group ------

all_groups :: cmt_actions

cmt_actions :: $(cmt_actions_dependencies)  $(cmt_actions_pre_constituents) $(cmt_actions_constituents)  $(cmt_actions_post_constituents)
	$(echo) "cmt_actions ok."

#	@/bin/echo " cmt_actions ok."

clean :: allclean

cmt_actionsclean ::  $(cmt_actions_constituentsclean)
	$(echo) $(cmt_actions_constituentsclean)
	$(echo) "cmt_actionsclean ok."

#	@echo $(cmt_actions_constituentsclean)
#	@/bin/echo " cmt_actionsclean ok."

cmt_actionsclean :: makefilesclean

#-- end of group ------
#-- start of constituent_lock ------

cmt_ShowerROOTDict_has_no_target_tag = 1

#--------------------------------------------------------

ifdef cmt_ShowerROOTDict_has_target_tag

#cmt_local_tagfile_ShowerROOTDict = $(Convert_tag)_ShowerROOTDict.make
cmt_local_tagfile_ShowerROOTDict = $(bin)$(Convert_tag)_ShowerROOTDict.make
cmt_local_setup_ShowerROOTDict = $(bin)setup_ShowerROOTDict$$$$.make
cmt_final_setup_ShowerROOTDict = $(bin)setup_ShowerROOTDict.make
#cmt_final_setup_ShowerROOTDict = $(bin)Convert_ShowerROOTDictsetup.make
cmt_local_ShowerROOTDict_makefile = $(bin)ShowerROOTDict.make

ShowerROOTDict_extratags = -tag_add=target_ShowerROOTDict

#$(cmt_local_tagfile_ShowerROOTDict) : $(cmt_lock_setup)
ifndef QUICK
$(cmt_local_tagfile_ShowerROOTDict) ::
else
$(cmt_local_tagfile_ShowerROOTDict) :
endif
	$(echo) "(constituents.make) Rebuilding $@"; \
	  if test -f $(cmt_local_tagfile_ShowerROOTDict); then /bin/rm -f $(cmt_local_tagfile_ShowerROOTDict); fi ; \
	  $(cmtexe) -tag=$(tags) $(ShowerROOTDict_extratags) build tag_makefile >>$(cmt_local_tagfile_ShowerROOTDict)
	$(echo) "(constituents.make) Rebuilding $(cmt_final_setup_ShowerROOTDict)"; \
	  test ! -f $(cmt_local_setup_ShowerROOTDict) || \rm -f $(cmt_local_setup_ShowerROOTDict); \
	  trap '\rm -f $(cmt_local_setup_ShowerROOTDict)' 0 1 2 15; \
	  $(cmtexe) -tag=$(tags) $(ShowerROOTDict_extratags) show setup >$(cmt_local_setup_ShowerROOTDict) && \
	  if [ -f $(cmt_final_setup_ShowerROOTDict) ] && \
	    \cmp -s $(cmt_final_setup_ShowerROOTDict) $(cmt_local_setup_ShowerROOTDict); then \
	    \rm $(cmt_local_setup_ShowerROOTDict); else \
	    \mv -f $(cmt_local_setup_ShowerROOTDict) $(cmt_final_setup_ShowerROOTDict); fi

else

#cmt_local_tagfile_ShowerROOTDict = $(Convert_tag).make
cmt_local_tagfile_ShowerROOTDict = $(bin)$(Convert_tag).make
cmt_final_setup_ShowerROOTDict = $(bin)setup.make
#cmt_final_setup_ShowerROOTDict = $(bin)Convertsetup.make
cmt_local_ShowerROOTDict_makefile = $(bin)ShowerROOTDict.make

endif

ifdef STRUCTURED_OUTPUT
ShowerROOTDictdirs :
	@if test ! -d $(bin)ShowerROOTDict; then $(mkdir) -p $(bin)ShowerROOTDict; fi
	$(echo) "STRUCTURED_OUTPUT="$(bin)ShowerROOTDict
else
ShowerROOTDictdirs : ;
endif

#ifndef QUICK
#ifdef STRUCTURED_OUTPUT
# ShowerROOTDictdirs ::
#	@if test ! -d $(bin)ShowerROOTDict; then $(mkdir) -p $(bin)ShowerROOTDict; fi
#	$(echo) "STRUCTURED_OUTPUT="$(bin)ShowerROOTDict
#
#$(cmt_local_ShowerROOTDict_makefile) :: $(ShowerROOTDict_dependencies) $(cmt_local_tagfile_ShowerROOTDict) build_library_links dirs ShowerROOTDictdirs
#else
#$(cmt_local_ShowerROOTDict_makefile) :: $(ShowerROOTDict_dependencies) $(cmt_local_tagfile_ShowerROOTDict) build_library_links dirs
#endif
#else
#$(cmt_local_ShowerROOTDict_makefile) :: $(cmt_local_tagfile_ShowerROOTDict)
#endif

makefiles : $(cmt_local_ShowerROOTDict_makefile)

ifndef QUICK
$(cmt_local_ShowerROOTDict_makefile) : $(ShowerROOTDict_dependencies) $(cmt_local_tagfile_ShowerROOTDict) build_library_links
else
$(cmt_local_ShowerROOTDict_makefile) : $(cmt_local_tagfile_ShowerROOTDict)
endif
	$(echo) "(constituents.make) Building ShowerROOTDict.make"; \
	  $(cmtexe) -tag=$(tags) $(ShowerROOTDict_extratags) build constituent_makefile -out=$(cmt_local_ShowerROOTDict_makefile) ShowerROOTDict

ShowerROOTDict :: $(ShowerROOTDict_dependencies) $(cmt_local_ShowerROOTDict_makefile) dirs ShowerROOTDictdirs
	$(echo) "(constituents.make) Creating ShowerROOTDict${lock_suffix} and Starting ShowerROOTDict"
	@${lock_command} ShowerROOTDict${lock_suffix} || exit $$?; \
	  retval=$$?; \
	  trap '${unlock_command} ShowerROOTDict${lock_suffix}; exit $${retval}' 1 2 15; \
	  $(MAKE) -f $(cmt_local_ShowerROOTDict_makefile) ShowerROOTDict; \
	  retval=$$?; ${unlock_command} ShowerROOTDict${lock_suffix}; exit $${retval}
	$(echo) "(constituents.make) ShowerROOTDict done"

clean :: ShowerROOTDictclean

ShowerROOTDictclean :: $(ShowerROOTDictclean_dependencies) ##$(cmt_local_ShowerROOTDict_makefile)
	$(echo) "(constituents.make) Starting ShowerROOTDictclean"
	@-if test -f $(cmt_local_ShowerROOTDict_makefile); then \
	  $(MAKE) -f $(cmt_local_ShowerROOTDict_makefile) ShowerROOTDictclean; \
	fi
	$(echo) "(constituents.make) ShowerROOTDictclean done"
#	@-$(MAKE) -f $(cmt_local_ShowerROOTDict_makefile) ShowerROOTDictclean

##	  /bin/rm -f $(cmt_local_ShowerROOTDict_makefile) $(bin)ShowerROOTDict_dependencies.make

install :: ShowerROOTDictinstall

ShowerROOTDictinstall :: $(ShowerROOTDict_dependencies) $(cmt_local_ShowerROOTDict_makefile)
	$(echo) "(constituents.make) Starting install ShowerROOTDict"
	@-$(MAKE) -f $(cmt_local_ShowerROOTDict_makefile) install
	$(echo) "(constituents.make) install ShowerROOTDict done"

uninstall :: ShowerROOTDictuninstall

$(foreach d,$(ShowerROOTDict_dependencies),$(eval $(d)uninstall_dependencies += ShowerROOTDictuninstall))

ShowerROOTDictuninstall :: $(ShowerROOTDictuninstall_dependencies) $(cmt_local_ShowerROOTDict_makefile)
	$(echo) "(constituents.make) Starting uninstall ShowerROOTDict"
	@$(MAKE) -f $(cmt_local_ShowerROOTDict_makefile) uninstall
	$(echo) "(constituents.make) uninstall ShowerROOTDict done"

ifndef PEDANTIC
.DEFAULT::
	$(echo) "(constituents.make) Starting $@ ShowerROOTDict"
	$(echo) Using default action for $@
	$(echo) "(constituents.make) $@ ShowerROOTDict done"
endif

#-- end of constituent_lock ------
#-- start of constituent ------

cmt_ShowerIO_has_no_target_tag = 1

#--------------------------------------------------------

ifdef cmt_ShowerIO_has_target_tag

#cmt_local_tagfile_ShowerIO = $(Convert_tag)_ShowerIO.make
cmt_local_tagfile_ShowerIO = $(bin)$(Convert_tag)_ShowerIO.make
cmt_local_setup_ShowerIO = $(bin)setup_ShowerIO$$$$.make
cmt_final_setup_ShowerIO = $(bin)setup_ShowerIO.make
#cmt_final_setup_ShowerIO = $(bin)Convert_ShowerIOsetup.make
cmt_local_ShowerIO_makefile = $(bin)ShowerIO.make

ShowerIO_extratags = -tag_add=target_ShowerIO

#$(cmt_local_tagfile_ShowerIO) : $(cmt_lock_setup)
ifndef QUICK
$(cmt_local_tagfile_ShowerIO) ::
else
$(cmt_local_tagfile_ShowerIO) :
endif
	$(echo) "(constituents.make) Rebuilding $@"; \
	  if test -f $(cmt_local_tagfile_ShowerIO); then /bin/rm -f $(cmt_local_tagfile_ShowerIO); fi ; \
	  $(cmtexe) -tag=$(tags) $(ShowerIO_extratags) build tag_makefile >>$(cmt_local_tagfile_ShowerIO)
	$(echo) "(constituents.make) Rebuilding $(cmt_final_setup_ShowerIO)"; \
	  test ! -f $(cmt_local_setup_ShowerIO) || \rm -f $(cmt_local_setup_ShowerIO); \
	  trap '\rm -f $(cmt_local_setup_ShowerIO)' 0 1 2 15; \
	  $(cmtexe) -tag=$(tags) $(ShowerIO_extratags) show setup >$(cmt_local_setup_ShowerIO) && \
	  if [ -f $(cmt_final_setup_ShowerIO) ] && \
	    \cmp -s $(cmt_final_setup_ShowerIO) $(cmt_local_setup_ShowerIO); then \
	    \rm $(cmt_local_setup_ShowerIO); else \
	    \mv -f $(cmt_local_setup_ShowerIO) $(cmt_final_setup_ShowerIO); fi

else

#cmt_local_tagfile_ShowerIO = $(Convert_tag).make
cmt_local_tagfile_ShowerIO = $(bin)$(Convert_tag).make
cmt_final_setup_ShowerIO = $(bin)setup.make
#cmt_final_setup_ShowerIO = $(bin)Convertsetup.make
cmt_local_ShowerIO_makefile = $(bin)ShowerIO.make

endif

ifdef STRUCTURED_OUTPUT
ShowerIOdirs :
	@if test ! -d $(bin)ShowerIO; then $(mkdir) -p $(bin)ShowerIO; fi
	$(echo) "STRUCTURED_OUTPUT="$(bin)ShowerIO
else
ShowerIOdirs : ;
endif

#ifndef QUICK
#ifdef STRUCTURED_OUTPUT
# ShowerIOdirs ::
#	@if test ! -d $(bin)ShowerIO; then $(mkdir) -p $(bin)ShowerIO; fi
#	$(echo) "STRUCTURED_OUTPUT="$(bin)ShowerIO
#
#$(cmt_local_ShowerIO_makefile) :: $(ShowerIO_dependencies) $(cmt_local_tagfile_ShowerIO) build_library_links dirs ShowerIOdirs
#else
#$(cmt_local_ShowerIO_makefile) :: $(ShowerIO_dependencies) $(cmt_local_tagfile_ShowerIO) build_library_links dirs
#endif
#else
#$(cmt_local_ShowerIO_makefile) :: $(cmt_local_tagfile_ShowerIO)
#endif

makefiles : $(cmt_local_ShowerIO_makefile)

ifndef QUICK
$(cmt_local_ShowerIO_makefile) : $(ShowerIO_dependencies) $(cmt_local_tagfile_ShowerIO) build_library_links
else
$(cmt_local_ShowerIO_makefile) : $(cmt_local_tagfile_ShowerIO)
endif
	$(echo) "(constituents.make) Building ShowerIO.make"; \
	  $(cmtexe) -tag=$(tags) $(ShowerIO_extratags) build constituent_makefile -out=$(cmt_local_ShowerIO_makefile) ShowerIO

ShowerIO :: $(ShowerIO_dependencies) $(cmt_local_ShowerIO_makefile) dirs ShowerIOdirs
	$(echo) "(constituents.make) Starting ShowerIO"
	@$(MAKE) -f $(cmt_local_ShowerIO_makefile) ShowerIO
	$(echo) "(constituents.make) ShowerIO done"

clean :: ShowerIOclean

ShowerIOclean :: $(ShowerIOclean_dependencies) ##$(cmt_local_ShowerIO_makefile)
	$(echo) "(constituents.make) Starting ShowerIOclean"
	@-if test -f $(cmt_local_ShowerIO_makefile); then \
	  $(MAKE) -f $(cmt_local_ShowerIO_makefile) ShowerIOclean; \
	fi
	$(echo) "(constituents.make) ShowerIOclean done"
#	@-$(MAKE) -f $(cmt_local_ShowerIO_makefile) ShowerIOclean

##	  /bin/rm -f $(cmt_local_ShowerIO_makefile) $(bin)ShowerIO_dependencies.make

install :: ShowerIOinstall

ShowerIOinstall :: $(ShowerIO_dependencies) $(cmt_local_ShowerIO_makefile)
	$(echo) "(constituents.make) Starting install ShowerIO"
	@-$(MAKE) -f $(cmt_local_ShowerIO_makefile) install
	$(echo) "(constituents.make) install ShowerIO done"

uninstall :: ShowerIOuninstall

$(foreach d,$(ShowerIO_dependencies),$(eval $(d)uninstall_dependencies += ShowerIOuninstall))

ShowerIOuninstall :: $(ShowerIOuninstall_dependencies) $(cmt_local_ShowerIO_makefile)
	$(echo) "(constituents.make) Starting uninstall ShowerIO"
	@$(MAKE) -f $(cmt_local_ShowerIO_makefile) uninstall
	$(echo) "(constituents.make) uninstall ShowerIO done"

ifndef PEDANTIC
.DEFAULT::
	$(echo) "(constituents.make) Starting $@ ShowerIO"
	$(echo) Using default action for $@
	$(echo) "(constituents.make) $@ ShowerIO done"
endif

#-- end of constituent ------
#-- start of constituent ------

cmt_ShowerROOT_has_no_target_tag = 1

#--------------------------------------------------------

ifdef cmt_ShowerROOT_has_target_tag

#cmt_local_tagfile_ShowerROOT = $(Convert_tag)_ShowerROOT.make
cmt_local_tagfile_ShowerROOT = $(bin)$(Convert_tag)_ShowerROOT.make
cmt_local_setup_ShowerROOT = $(bin)setup_ShowerROOT$$$$.make
cmt_final_setup_ShowerROOT = $(bin)setup_ShowerROOT.make
#cmt_final_setup_ShowerROOT = $(bin)Convert_ShowerROOTsetup.make
cmt_local_ShowerROOT_makefile = $(bin)ShowerROOT.make

ShowerROOT_extratags = -tag_add=target_ShowerROOT

#$(cmt_local_tagfile_ShowerROOT) : $(cmt_lock_setup)
ifndef QUICK
$(cmt_local_tagfile_ShowerROOT) ::
else
$(cmt_local_tagfile_ShowerROOT) :
endif
	$(echo) "(constituents.make) Rebuilding $@"; \
	  if test -f $(cmt_local_tagfile_ShowerROOT); then /bin/rm -f $(cmt_local_tagfile_ShowerROOT); fi ; \
	  $(cmtexe) -tag=$(tags) $(ShowerROOT_extratags) build tag_makefile >>$(cmt_local_tagfile_ShowerROOT)
	$(echo) "(constituents.make) Rebuilding $(cmt_final_setup_ShowerROOT)"; \
	  test ! -f $(cmt_local_setup_ShowerROOT) || \rm -f $(cmt_local_setup_ShowerROOT); \
	  trap '\rm -f $(cmt_local_setup_ShowerROOT)' 0 1 2 15; \
	  $(cmtexe) -tag=$(tags) $(ShowerROOT_extratags) show setup >$(cmt_local_setup_ShowerROOT) && \
	  if [ -f $(cmt_final_setup_ShowerROOT) ] && \
	    \cmp -s $(cmt_final_setup_ShowerROOT) $(cmt_local_setup_ShowerROOT); then \
	    \rm $(cmt_local_setup_ShowerROOT); else \
	    \mv -f $(cmt_local_setup_ShowerROOT) $(cmt_final_setup_ShowerROOT); fi

else

#cmt_local_tagfile_ShowerROOT = $(Convert_tag).make
cmt_local_tagfile_ShowerROOT = $(bin)$(Convert_tag).make
cmt_final_setup_ShowerROOT = $(bin)setup.make
#cmt_final_setup_ShowerROOT = $(bin)Convertsetup.make
cmt_local_ShowerROOT_makefile = $(bin)ShowerROOT.make

endif

ifdef STRUCTURED_OUTPUT
ShowerROOTdirs :
	@if test ! -d $(bin)ShowerROOT; then $(mkdir) -p $(bin)ShowerROOT; fi
	$(echo) "STRUCTURED_OUTPUT="$(bin)ShowerROOT
else
ShowerROOTdirs : ;
endif

#ifndef QUICK
#ifdef STRUCTURED_OUTPUT
# ShowerROOTdirs ::
#	@if test ! -d $(bin)ShowerROOT; then $(mkdir) -p $(bin)ShowerROOT; fi
#	$(echo) "STRUCTURED_OUTPUT="$(bin)ShowerROOT
#
#$(cmt_local_ShowerROOT_makefile) :: $(ShowerROOT_dependencies) $(cmt_local_tagfile_ShowerROOT) build_library_links dirs ShowerROOTdirs
#else
#$(cmt_local_ShowerROOT_makefile) :: $(ShowerROOT_dependencies) $(cmt_local_tagfile_ShowerROOT) build_library_links dirs
#endif
#else
#$(cmt_local_ShowerROOT_makefile) :: $(cmt_local_tagfile_ShowerROOT)
#endif

makefiles : $(cmt_local_ShowerROOT_makefile)

ifndef QUICK
$(cmt_local_ShowerROOT_makefile) : $(ShowerROOT_dependencies) $(cmt_local_tagfile_ShowerROOT) build_library_links
else
$(cmt_local_ShowerROOT_makefile) : $(cmt_local_tagfile_ShowerROOT)
endif
	$(echo) "(constituents.make) Building ShowerROOT.make"; \
	  $(cmtexe) -tag=$(tags) $(ShowerROOT_extratags) build constituent_makefile -out=$(cmt_local_ShowerROOT_makefile) ShowerROOT

ShowerROOT :: $(ShowerROOT_dependencies) $(cmt_local_ShowerROOT_makefile) dirs ShowerROOTdirs
	$(echo) "(constituents.make) Starting ShowerROOT"
	@$(MAKE) -f $(cmt_local_ShowerROOT_makefile) ShowerROOT
	$(echo) "(constituents.make) ShowerROOT done"

clean :: ShowerROOTclean

ShowerROOTclean :: $(ShowerROOTclean_dependencies) ##$(cmt_local_ShowerROOT_makefile)
	$(echo) "(constituents.make) Starting ShowerROOTclean"
	@-if test -f $(cmt_local_ShowerROOT_makefile); then \
	  $(MAKE) -f $(cmt_local_ShowerROOT_makefile) ShowerROOTclean; \
	fi
	$(echo) "(constituents.make) ShowerROOTclean done"
#	@-$(MAKE) -f $(cmt_local_ShowerROOT_makefile) ShowerROOTclean

##	  /bin/rm -f $(cmt_local_ShowerROOT_makefile) $(bin)ShowerROOT_dependencies.make

install :: ShowerROOTinstall

ShowerROOTinstall :: $(ShowerROOT_dependencies) $(cmt_local_ShowerROOT_makefile)
	$(echo) "(constituents.make) Starting install ShowerROOT"
	@-$(MAKE) -f $(cmt_local_ShowerROOT_makefile) install
	$(echo) "(constituents.make) install ShowerROOT done"

uninstall :: ShowerROOTuninstall

$(foreach d,$(ShowerROOT_dependencies),$(eval $(d)uninstall_dependencies += ShowerROOTuninstall))

ShowerROOTuninstall :: $(ShowerROOTuninstall_dependencies) $(cmt_local_ShowerROOT_makefile)
	$(echo) "(constituents.make) Starting uninstall ShowerROOT"
	@$(MAKE) -f $(cmt_local_ShowerROOT_makefile) uninstall
	$(echo) "(constituents.make) uninstall ShowerROOT done"

ifndef PEDANTIC
.DEFAULT::
	$(echo) "(constituents.make) Starting $@ ShowerROOT"
	$(echo) Using default action for $@
	$(echo) "(constituents.make) $@ ShowerROOT done"
endif

#-- end of constituent ------
#-- start of constituent ------

cmt_Utils_has_no_target_tag = 1

#--------------------------------------------------------

ifdef cmt_Utils_has_target_tag

#cmt_local_tagfile_Utils = $(Convert_tag)_Utils.make
cmt_local_tagfile_Utils = $(bin)$(Convert_tag)_Utils.make
cmt_local_setup_Utils = $(bin)setup_Utils$$$$.make
cmt_final_setup_Utils = $(bin)setup_Utils.make
#cmt_final_setup_Utils = $(bin)Convert_Utilssetup.make
cmt_local_Utils_makefile = $(bin)Utils.make

Utils_extratags = -tag_add=target_Utils

#$(cmt_local_tagfile_Utils) : $(cmt_lock_setup)
ifndef QUICK
$(cmt_local_tagfile_Utils) ::
else
$(cmt_local_tagfile_Utils) :
endif
	$(echo) "(constituents.make) Rebuilding $@"; \
	  if test -f $(cmt_local_tagfile_Utils); then /bin/rm -f $(cmt_local_tagfile_Utils); fi ; \
	  $(cmtexe) -tag=$(tags) $(Utils_extratags) build tag_makefile >>$(cmt_local_tagfile_Utils)
	$(echo) "(constituents.make) Rebuilding $(cmt_final_setup_Utils)"; \
	  test ! -f $(cmt_local_setup_Utils) || \rm -f $(cmt_local_setup_Utils); \
	  trap '\rm -f $(cmt_local_setup_Utils)' 0 1 2 15; \
	  $(cmtexe) -tag=$(tags) $(Utils_extratags) show setup >$(cmt_local_setup_Utils) && \
	  if [ -f $(cmt_final_setup_Utils) ] && \
	    \cmp -s $(cmt_final_setup_Utils) $(cmt_local_setup_Utils); then \
	    \rm $(cmt_local_setup_Utils); else \
	    \mv -f $(cmt_local_setup_Utils) $(cmt_final_setup_Utils); fi

else

#cmt_local_tagfile_Utils = $(Convert_tag).make
cmt_local_tagfile_Utils = $(bin)$(Convert_tag).make
cmt_final_setup_Utils = $(bin)setup.make
#cmt_final_setup_Utils = $(bin)Convertsetup.make
cmt_local_Utils_makefile = $(bin)Utils.make

endif

ifdef STRUCTURED_OUTPUT
Utilsdirs :
	@if test ! -d $(bin)Utils; then $(mkdir) -p $(bin)Utils; fi
	$(echo) "STRUCTURED_OUTPUT="$(bin)Utils
else
Utilsdirs : ;
endif

#ifndef QUICK
#ifdef STRUCTURED_OUTPUT
# Utilsdirs ::
#	@if test ! -d $(bin)Utils; then $(mkdir) -p $(bin)Utils; fi
#	$(echo) "STRUCTURED_OUTPUT="$(bin)Utils
#
#$(cmt_local_Utils_makefile) :: $(Utils_dependencies) $(cmt_local_tagfile_Utils) build_library_links dirs Utilsdirs
#else
#$(cmt_local_Utils_makefile) :: $(Utils_dependencies) $(cmt_local_tagfile_Utils) build_library_links dirs
#endif
#else
#$(cmt_local_Utils_makefile) :: $(cmt_local_tagfile_Utils)
#endif

makefiles : $(cmt_local_Utils_makefile)

ifndef QUICK
$(cmt_local_Utils_makefile) : $(Utils_dependencies) $(cmt_local_tagfile_Utils) build_library_links
else
$(cmt_local_Utils_makefile) : $(cmt_local_tagfile_Utils)
endif
	$(echo) "(constituents.make) Building Utils.make"; \
	  $(cmtexe) -tag=$(tags) $(Utils_extratags) build constituent_makefile -out=$(cmt_local_Utils_makefile) Utils

Utils :: $(Utils_dependencies) $(cmt_local_Utils_makefile) dirs Utilsdirs
	$(echo) "(constituents.make) Starting Utils"
	@$(MAKE) -f $(cmt_local_Utils_makefile) Utils
	$(echo) "(constituents.make) Utils done"

clean :: Utilsclean

Utilsclean :: $(Utilsclean_dependencies) ##$(cmt_local_Utils_makefile)
	$(echo) "(constituents.make) Starting Utilsclean"
	@-if test -f $(cmt_local_Utils_makefile); then \
	  $(MAKE) -f $(cmt_local_Utils_makefile) Utilsclean; \
	fi
	$(echo) "(constituents.make) Utilsclean done"
#	@-$(MAKE) -f $(cmt_local_Utils_makefile) Utilsclean

##	  /bin/rm -f $(cmt_local_Utils_makefile) $(bin)Utils_dependencies.make

install :: Utilsinstall

Utilsinstall :: $(Utils_dependencies) $(cmt_local_Utils_makefile)
	$(echo) "(constituents.make) Starting install Utils"
	@-$(MAKE) -f $(cmt_local_Utils_makefile) install
	$(echo) "(constituents.make) install Utils done"

uninstall :: Utilsuninstall

$(foreach d,$(Utils_dependencies),$(eval $(d)uninstall_dependencies += Utilsuninstall))

Utilsuninstall :: $(Utilsuninstall_dependencies) $(cmt_local_Utils_makefile)
	$(echo) "(constituents.make) Starting uninstall Utils"
	@$(MAKE) -f $(cmt_local_Utils_makefile) uninstall
	$(echo) "(constituents.make) uninstall Utils done"

ifndef PEDANTIC
.DEFAULT::
	$(echo) "(constituents.make) Starting $@ Utils"
	$(echo) Using default action for $@
	$(echo) "(constituents.make) $@ Utils done"
endif

#-- end of constituent ------
#-- start of constituent ------

cmt_CorsToRoot_has_no_target_tag = 1

#--------------------------------------------------------

ifdef cmt_CorsToRoot_has_target_tag

#cmt_local_tagfile_CorsToRoot = $(Convert_tag)_CorsToRoot.make
cmt_local_tagfile_CorsToRoot = $(bin)$(Convert_tag)_CorsToRoot.make
cmt_local_setup_CorsToRoot = $(bin)setup_CorsToRoot$$$$.make
cmt_final_setup_CorsToRoot = $(bin)setup_CorsToRoot.make
#cmt_final_setup_CorsToRoot = $(bin)Convert_CorsToRootsetup.make
cmt_local_CorsToRoot_makefile = $(bin)CorsToRoot.make

CorsToRoot_extratags = -tag_add=target_CorsToRoot

#$(cmt_local_tagfile_CorsToRoot) : $(cmt_lock_setup)
ifndef QUICK
$(cmt_local_tagfile_CorsToRoot) ::
else
$(cmt_local_tagfile_CorsToRoot) :
endif
	$(echo) "(constituents.make) Rebuilding $@"; \
	  if test -f $(cmt_local_tagfile_CorsToRoot); then /bin/rm -f $(cmt_local_tagfile_CorsToRoot); fi ; \
	  $(cmtexe) -tag=$(tags) $(CorsToRoot_extratags) build tag_makefile >>$(cmt_local_tagfile_CorsToRoot)
	$(echo) "(constituents.make) Rebuilding $(cmt_final_setup_CorsToRoot)"; \
	  test ! -f $(cmt_local_setup_CorsToRoot) || \rm -f $(cmt_local_setup_CorsToRoot); \
	  trap '\rm -f $(cmt_local_setup_CorsToRoot)' 0 1 2 15; \
	  $(cmtexe) -tag=$(tags) $(CorsToRoot_extratags) show setup >$(cmt_local_setup_CorsToRoot) && \
	  if [ -f $(cmt_final_setup_CorsToRoot) ] && \
	    \cmp -s $(cmt_final_setup_CorsToRoot) $(cmt_local_setup_CorsToRoot); then \
	    \rm $(cmt_local_setup_CorsToRoot); else \
	    \mv -f $(cmt_local_setup_CorsToRoot) $(cmt_final_setup_CorsToRoot); fi

else

#cmt_local_tagfile_CorsToRoot = $(Convert_tag).make
cmt_local_tagfile_CorsToRoot = $(bin)$(Convert_tag).make
cmt_final_setup_CorsToRoot = $(bin)setup.make
#cmt_final_setup_CorsToRoot = $(bin)Convertsetup.make
cmt_local_CorsToRoot_makefile = $(bin)CorsToRoot.make

endif

ifdef STRUCTURED_OUTPUT
CorsToRootdirs :
	@if test ! -d $(bin)CorsToRoot; then $(mkdir) -p $(bin)CorsToRoot; fi
	$(echo) "STRUCTURED_OUTPUT="$(bin)CorsToRoot
else
CorsToRootdirs : ;
endif

#ifndef QUICK
#ifdef STRUCTURED_OUTPUT
# CorsToRootdirs ::
#	@if test ! -d $(bin)CorsToRoot; then $(mkdir) -p $(bin)CorsToRoot; fi
#	$(echo) "STRUCTURED_OUTPUT="$(bin)CorsToRoot
#
#$(cmt_local_CorsToRoot_makefile) :: $(CorsToRoot_dependencies) $(cmt_local_tagfile_CorsToRoot) build_library_links dirs CorsToRootdirs
#else
#$(cmt_local_CorsToRoot_makefile) :: $(CorsToRoot_dependencies) $(cmt_local_tagfile_CorsToRoot) build_library_links dirs
#endif
#else
#$(cmt_local_CorsToRoot_makefile) :: $(cmt_local_tagfile_CorsToRoot)
#endif

makefiles : $(cmt_local_CorsToRoot_makefile)

ifndef QUICK
$(cmt_local_CorsToRoot_makefile) : $(CorsToRoot_dependencies) $(cmt_local_tagfile_CorsToRoot) build_library_links
else
$(cmt_local_CorsToRoot_makefile) : $(cmt_local_tagfile_CorsToRoot)
endif
	$(echo) "(constituents.make) Building CorsToRoot.make"; \
	  $(cmtexe) -tag=$(tags) $(CorsToRoot_extratags) build constituent_makefile -out=$(cmt_local_CorsToRoot_makefile) CorsToRoot

CorsToRoot :: $(CorsToRoot_dependencies) $(cmt_local_CorsToRoot_makefile) dirs CorsToRootdirs
	$(echo) "(constituents.make) Starting CorsToRoot"
	@$(MAKE) -f $(cmt_local_CorsToRoot_makefile) CorsToRoot
	$(echo) "(constituents.make) CorsToRoot done"

clean :: CorsToRootclean

CorsToRootclean :: $(CorsToRootclean_dependencies) ##$(cmt_local_CorsToRoot_makefile)
	$(echo) "(constituents.make) Starting CorsToRootclean"
	@-if test -f $(cmt_local_CorsToRoot_makefile); then \
	  $(MAKE) -f $(cmt_local_CorsToRoot_makefile) CorsToRootclean; \
	fi
	$(echo) "(constituents.make) CorsToRootclean done"
#	@-$(MAKE) -f $(cmt_local_CorsToRoot_makefile) CorsToRootclean

##	  /bin/rm -f $(cmt_local_CorsToRoot_makefile) $(bin)CorsToRoot_dependencies.make

install :: CorsToRootinstall

CorsToRootinstall :: $(CorsToRoot_dependencies) $(cmt_local_CorsToRoot_makefile)
	$(echo) "(constituents.make) Starting install CorsToRoot"
	@-$(MAKE) -f $(cmt_local_CorsToRoot_makefile) install
	$(echo) "(constituents.make) install CorsToRoot done"

uninstall :: CorsToRootuninstall

$(foreach d,$(CorsToRoot_dependencies),$(eval $(d)uninstall_dependencies += CorsToRootuninstall))

CorsToRootuninstall :: $(CorsToRootuninstall_dependencies) $(cmt_local_CorsToRoot_makefile)
	$(echo) "(constituents.make) Starting uninstall CorsToRoot"
	@$(MAKE) -f $(cmt_local_CorsToRoot_makefile) uninstall
	$(echo) "(constituents.make) uninstall CorsToRoot done"

ifndef PEDANTIC
.DEFAULT::
	$(echo) "(constituents.make) Starting $@ CorsToRoot"
	$(echo) Using default action for $@
	$(echo) "(constituents.make) $@ CorsToRoot done"
endif

#-- end of constituent ------
#-- start of constituent_lock ------

cmt_make_has_target_tag = 1

#--------------------------------------------------------

ifdef cmt_make_has_target_tag

#cmt_local_tagfile_make = $(Convert_tag)_make.make
cmt_local_tagfile_make = $(bin)$(Convert_tag)_make.make
cmt_local_setup_make = $(bin)setup_make$$$$.make
cmt_final_setup_make = $(bin)setup_make.make
#cmt_final_setup_make = $(bin)Convert_makesetup.make
cmt_local_make_makefile = $(bin)make.make

make_extratags = -tag_add=target_make

#$(cmt_local_tagfile_make) : $(cmt_lock_setup)
ifndef QUICK
$(cmt_local_tagfile_make) ::
else
$(cmt_local_tagfile_make) :
endif
	$(echo) "(constituents.make) Rebuilding $@"; \
	  if test -f $(cmt_local_tagfile_make); then /bin/rm -f $(cmt_local_tagfile_make); fi ; \
	  $(cmtexe) -tag=$(tags) $(make_extratags) build tag_makefile >>$(cmt_local_tagfile_make)
	$(echo) "(constituents.make) Rebuilding $(cmt_final_setup_make)"; \
	  test ! -f $(cmt_local_setup_make) || \rm -f $(cmt_local_setup_make); \
	  trap '\rm -f $(cmt_local_setup_make)' 0 1 2 15; \
	  $(cmtexe) -tag=$(tags) $(make_extratags) show setup >$(cmt_local_setup_make) && \
	  if [ -f $(cmt_final_setup_make) ] && \
	    \cmp -s $(cmt_final_setup_make) $(cmt_local_setup_make); then \
	    \rm $(cmt_local_setup_make); else \
	    \mv -f $(cmt_local_setup_make) $(cmt_final_setup_make); fi

else

#cmt_local_tagfile_make = $(Convert_tag).make
cmt_local_tagfile_make = $(bin)$(Convert_tag).make
cmt_final_setup_make = $(bin)setup.make
#cmt_final_setup_make = $(bin)Convertsetup.make
cmt_local_make_makefile = $(bin)make.make

endif

ifdef STRUCTURED_OUTPUT
makedirs :
	@if test ! -d $(bin)make; then $(mkdir) -p $(bin)make; fi
	$(echo) "STRUCTURED_OUTPUT="$(bin)make
else
makedirs : ;
endif

#ifndef QUICK
#ifdef STRUCTURED_OUTPUT
# makedirs ::
#	@if test ! -d $(bin)make; then $(mkdir) -p $(bin)make; fi
#	$(echo) "STRUCTURED_OUTPUT="$(bin)make
#
#$(cmt_local_make_makefile) :: $(make_dependencies) $(cmt_local_tagfile_make) build_library_links dirs makedirs
#else
#$(cmt_local_make_makefile) :: $(make_dependencies) $(cmt_local_tagfile_make) build_library_links dirs
#endif
#else
#$(cmt_local_make_makefile) :: $(cmt_local_tagfile_make)
#endif

makefiles : $(cmt_local_make_makefile)

ifndef QUICK
$(cmt_local_make_makefile) : $(make_dependencies) $(cmt_local_tagfile_make) build_library_links
else
$(cmt_local_make_makefile) : $(cmt_local_tagfile_make)
endif
	$(echo) "(constituents.make) Building make.make"; \
	  $(cmtexe) -tag=$(tags) $(make_extratags) build constituent_makefile -out=$(cmt_local_make_makefile) make

make :: $(make_dependencies) $(cmt_local_make_makefile) dirs makedirs
	$(echo) "(constituents.make) Creating make${lock_suffix} and Starting make"
	@${lock_command} make${lock_suffix} || exit $$?; \
	  retval=$$?; \
	  trap '${unlock_command} make${lock_suffix}; exit $${retval}' 1 2 15; \
	  $(MAKE) -f $(cmt_local_make_makefile) make; \
	  retval=$$?; ${unlock_command} make${lock_suffix}; exit $${retval}
	$(echo) "(constituents.make) make done"

clean :: makeclean

makeclean :: $(makeclean_dependencies) ##$(cmt_local_make_makefile)
	$(echo) "(constituents.make) Starting makeclean"
	@-if test -f $(cmt_local_make_makefile); then \
	  $(MAKE) -f $(cmt_local_make_makefile) makeclean; \
	fi
	$(echo) "(constituents.make) makeclean done"
#	@-$(MAKE) -f $(cmt_local_make_makefile) makeclean

##	  /bin/rm -f $(cmt_local_make_makefile) $(bin)make_dependencies.make

install :: makeinstall

makeinstall :: $(make_dependencies) $(cmt_local_make_makefile)
	$(echo) "(constituents.make) Starting install make"
	@-$(MAKE) -f $(cmt_local_make_makefile) install
	$(echo) "(constituents.make) install make done"

uninstall :: makeuninstall

$(foreach d,$(make_dependencies),$(eval $(d)uninstall_dependencies += makeuninstall))

makeuninstall :: $(makeuninstall_dependencies) $(cmt_local_make_makefile)
	$(echo) "(constituents.make) Starting uninstall make"
	@$(MAKE) -f $(cmt_local_make_makefile) uninstall
	$(echo) "(constituents.make) uninstall make done"

ifndef PEDANTIC
.DEFAULT::
	$(echo) "(constituents.make) Starting $@ make"
	$(echo) Using default action for $@
	$(echo) "(constituents.make) $@ make done"
endif

#-- end of constituent_lock ------
#-- start of constituents_trailer ------

clean :: remove_library_links

remove_library_links ::
	$(echo) "(constituents.make) Removing library links"; \
	  $(remove_library_links)

makefilesclean ::

###	@/bin/rm -f checkuses

###	/bin/rm -f *.make*

clean :: makefilesclean

binclean :: clean
	$(echo) "(constituents.make) Removing binary directory $(bin)"
	@if test ! "$(bin)" = "./"; then \
	  /bin/rm -rf $(bin); \
	fi

#-- end of constituents_trailer ------
